@name Naki's Stargates V3.0 - Stargate - Atlantis
@inputs TextEntry:string DialButton Iris
@persist IrisActiveSend:string IrisActive CanOpen Val Switch Horizon Address:string Close WritingData:string TextEntry:string Open TargetEnt:entity Block Dial Chevron_Locked ChevsActive ErrorCode Closing V V2 Size Glyphs [Chev OpenAudio CloseAudio Fail]:webaudio
@outputs Address:string WritingData:string Horizon Open Chevron_Locked ChevsActive ErrorCode Closing Glyphs R G B

@persist Chev1 Chev2 Chev3 Chev4 Chev5 Chev6 Chev7 Chev8 Chev9 AllChev
@outputs Chev1 Chev2 Chev3 Chev4 Chev5 Chev6 Chev7 Chev8 Chev9 AllChev

@persist [ChevronSound HorizonOpenSound HorizonCloseSound DialErrorSound]:string

@persist Width_Chevron1 Width_Chevron2 Width_Base Width [Mat_Base Mat_Chevron]:string [Color_Base Chev_Color_On Chev_Color_Off]:vector

@inputs [Glyph]:entity

@model models/sprops/geometry/fdisc_132.mdl

#useable models for @model 
#models/sprops/rectangles/size_8/rect_192x192x3.mdl
#models/sprops/geometry/fdisc_132.mdl

interval(50)
runOnLast(1)

if(first()){
    
    #[
    Test:destroy()
    Test = webAudio("https://raw.githubusercontent.com/RafaelDeJongh/cap_resources/master/sound/stargate/close.mp3")
    Test:setPos(entity():pos())
    Test:setRadius(2000)
    Test:parentTo(entity())
    Test:play()
    ]#
    if(Chev:isValid()){
        Chev:destroy()
    }
    if(OpenAudio:isValid()){
        OpenAudio:destroy()
    }
    if(CloseAudio:isValid()){
        CloseAudio:destroy()
    }
    if(Fail:isValid()){
        Fail:destroy()
    }
    #the e2 uses datasignal stuff to wirelessly link the gates, meaning 
    #all you need is the address and power to go between all gates that are in the same group
    #group name is here (below) don't recommend changing it, but you can if you really want to
    dsJoinGroup("stargate-naki")
    dsSetScope(2)
    
    entity():setAlpha(0)
    
    Address = "kqmvias"
    
    #Name of the gate
    Name = "Atlantis"
    
    ChevronSound = "buttons/button3.wav"
    HorizonOpenSound = "ambient/water/water_splash3.wav"
    HorizonCloseSound = "ambient/water/water_splash2.wav"
    DialErrorSound = "buttons/button5.wav"
    HorizonEnterSound = "player/footsteps/wade5.wav"
    HorizonExitSound = "player/footsteps/wade2.wav"
    
    setName(Name+": "+Address)
    
    if(Address:explode(""):count()>9){
        Error=1
    }elseif(Address:explode(""):count()<7){
        Error=2
    }else{
        for(I = 1,Address:explode(""):count()){
            if(Address:explode("")[I,string]==Address:explode("")[I+1,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+2,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+3,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+4,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+5,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+6,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+7,string]){
                Error=3
            }elseif(Address:explode("")[I,string]==Address:explode("")[I+8,string]){
                Error=3
            }
        }
    }
    if(Error==1){
        hint("Invalid address code: Code is too long!",1000)
    }
    if(Error==2){
        hint("Invalid address code: Code is too short!",1000)
    }
    if(Error==3){
        hint("Invalid address code: An Address cannot contain the same symbol more than once!",1000)
    }
    if(Error>0){
        Block = 1
    }else{
        Block = 0
    }
    Mat_Base = "sprops/textures/sprops_metal5"
    Color_Base = (vec(108, 117, 122)*0.9)+(vec(255)*0.15)
    
    Mat_Base_Symbols = "sprops/textures/sprops_metal5"
    Color_Base_Symbols = (vec(125,175,180)*0.45)
    
    Mat_Chevron = "models/debug/debugwhite"
    
    Chev_Color_On = vec(75,255,255)
    Chev_Color_Off = vec(50,80,90)*1.7
    
    Width = 0.8
    
    Width_Chevron1 = 0.7
    Width_Chevron2 = 1.4
    Width_Base = 1
    
    Size = 1.15
    
    local I = 1
    local E = entity()
    local P = entity()
    holoCreate(I)
    holoPos(I,E:toWorld(vec(0,0,0)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoScale(I,vec(7,2*Width_Base*Width,7)*Size)
    holoModel(I,"models/sprops/geometry/fring_30.mdl")
    holoMaterial(I,Mat_Base_Symbols)
    holoColor(I,Color_Base_Symbols)
    holoParent(I,P)
    
    local I = 2
    local E = entity()
    local P = entity()
    holoCreate(I)
    holoPos(I,E:toWorld(vec(0,0,0)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoScale(I,vec(2.95,3.8*Width_Base*Width,2.95)*Size)
    holoModel(I,"models/sprops/geometry/fring_72.mdl")
    holoMaterial(I,Mat_Base)
    holoColor(I,Color_Base*0.9)
    holoParent(I,P)
    
    local I = 3
    local E = entity()
    local P = entity()
    holoCreate(I)
    holoPos(I,E:toWorld(vec(0,0,0)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoScale(I,vec(1.3,2.6*Width_Base*Width,1.3)*Size)
    holoModel(I,"models/sprops/geometry/fring_132.mdl")
    holoMaterial(I,Mat_Base)
    holoColor(I,Color_Base*0.8)
    holoParent(I,P)
    
    local I = 4
    local E = entity()
    local P = entity()
    holoCreate(I)
    holoPos(I,E:toWorld(vec(0,0,0)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoScale(I,vec(0))
    holoParent(I,P)
    
    function chevronHolo(Index,[Par2 Par1]:entity,Ang,Index_Chevron){
        
        holoAng(4,entity():toWorld(ang((360/9)+Ang,0,0)))
        
        local I = Index
        local E = Par2
        local P = Par1
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,2,99)*Size))
        holoAng(I,E:toWorld(ang(0,0,174)))
        holoScale(I,vec(1*Width_Chevron2,4*Width_Chevron1*Width,2.8)*Size)
        holoModel(I,"models/sprops/geometry/hhex_12.mdl")
        holoMaterial(I,Mat_Base)
        holoColor(I,Color_Base)
        holoParent(I,P)
        
        local I = Index+1
        local E = Par2
        local P = Par1
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,-2,99)*Size))
        holoAng(I,E:toWorld(ang(0,0,186)))
        holoScale(I,vec(1*Width_Chevron2,4*Width_Chevron1*Width,2.8)*Size)
        holoModel(I,"models/sprops/geometry/hhex_12.mdl")
        holoMaterial(I,Mat_Base)
        holoColor(I,Color_Base)
        holoParent(I,P)
        
        local I = Index_Chevron
        local E = Par2
        local P = Par1
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,2,101)*Size))
        holoAng(I,E:toWorld(ang(0,0,174)))
        holoScale(I,vec(0.5*Width_Chevron2,4.4*Width_Chevron1*Width,2.2)*Size)
        holoModel(I,"models/sprops/geometry/hhex_12.mdl")
        holoMaterial(I,Mat_Chevron)
        holoColor(I,Chev_Color_Off)
        holoParent(I,P)
        
        local I = Index_Chevron+1
        local E = Par2
        local P = Par1
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,-2,101)*Size))
        holoAng(I,E:toWorld(ang(0,0,186)))
        holoScale(I,vec(0.5*Width_Chevron2,4.4*Width_Chevron1*Width,2.2)*Size)
        holoModel(I,"models/sprops/geometry/hhex_12.mdl")
        holoMaterial(I,Mat_Chevron)
        holoColor(I,Chev_Color_Off)
        holoParent(I,P)
        
        local I = Index+2
        local E = Par2
        local P = Par1
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,0,105.1)*Size))
        holoAng(I,E:toWorld(ang(0,0,0)))
        holoScale(I,vec(2.7*Width_Chevron2,6*Width_Chevron1*Width,0.4)*Size)
        holoModel(I,"models/sprops/geometry/hhex_12.mdl")
        holoMaterial(I,Mat_Base)
        holoColor(I,Color_Base)
        holoParent(I,P)
    }
    
    #chevronHolo(Index,[Par2 Par1]:entity,Ang){
    
    if(!Block){
        local I = 69
        local E = entity()
        local P = entity()
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,0,0)))
        holoAng(I,E:toWorld(ang(0,0,0)))
        holoScale(I,vec(2.2,0.1,2.2)*Size)
        holoModel(I,"models/sprops/geometry/fdisc_84.mdl")
        holoMaterial(I,"models/shadertest/predator")#models/shadertest/predator
        holoColor(I,vec(0,125,255)*0.8)
        holoParent(I,P)
        holoDisableShading(I,1)
        holoAlpha(I,254)
        
        holoEntity(I):setRenderMode(9)
        
        local I = 9999
        local E = entity()
        local P = entity()
        #holoCreate(I)
        holoPos(I,E:toWorld(vec(0,0,0)))
        holoAng(I,E:toWorld(ang(0,0,0)))
        holoScale(I,vec(2.2,0.05,2.2)*Size)
        holoModel(I,"models/sprops/geometry/fdisc_84.mdl")
        holoMaterial(I,"sprops/trans/lights/light_plastic")
        holoColor(I,(vec(0,0,255)*0.3)+vec(255)*0.7)
        holoAlpha(I,50)
        holoParent(I,P)
        #holoDisableShading(I,1)
        #holoAlpha(I,254)
        
        holoEntity(I):setRenderMode(9)
        
        local I = 70
        local E = entity()
        local P = entity()
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,75,0)*Size))
        holoAng(I,E:toWorld(ang(0,0,90)))
        holoScale(I,vec(1,1,1)*Size)
        holoModel(I,"models/props_foliage/tree_poplar_01.mdl")
        holoMaterial(I,"models/shadertest/shader3")#models/shadertest/shader3
        holoColor(I,vec(0,125,255)*0.8)
        holoParent(I,P)
        holoDisableShading(I,1)
        holoAlpha(I,254)
        
        holoClip(I,1,vec(0,0,100),E:up(),0)
        holoClipEnabled(I,1,1)
        
        holoEntity(I):setRenderMode(9)
        
        local I = 71
        local E = entity()
        local P = entity()
        holoCreate(I)
        holoPos(I,E:toWorld(vec(0,0,0)))
        holoAng(I,E:toWorld(ang(0,0,90)))
        holoScale(I,vec(3.5,3.5,0)*Size)
        holoModel(I,"models/sprops/misc/domes/size_4/dome_48x144.mdl")
        holoMaterial(I,"models/spawn_effect")#models/spawn_effect
        holoColor(I,vec(0,125,255)*0.8)
        holoParent(I,P)
        holoDisableShading(I,1)
        holoAlpha(I,254)
        
        holoEntity(I):setRenderMode(9)
        #(0 = Normal, 1 = TransColor, 2 = TransTexture, 3 = Glow, 4 = TransAlpha, 5 = TransAdd, 6 = Enviromental, 7 = TransAddFrameBlend, 8 = TransAlphaAdd, 9 = WorldGlow, 10 = None)
        
    }
    holoCreate(1000)
    holoPos(1000,Glyph:toWorld(vec(0,0,0)))
    holoAng(1000,Glyph:toWorld(ang(0,0,0)))
    Glyph:parentTo(holoEntity(1000))
    holoScale(1000,vec(0))
    holoParent(1000,entity())
    
    Glyph:setColor(Chev_Color_Off)
    Glyph:setMaterial(Mat_Chevron)
    
    timer("holocreate2",100)
}elseif(dupefinished()){
    reset()
}elseif(clk("holocreate2")){
    if(holoRemainingSpawns()>5){
        V2++
        holoAng(71,entity():toWorld(ang((-(360/(36))/2)+(360/(36)*V2),0,0)))
        
        holoCreate(V2+72)
        holoPos(V2+72,holoEntity(71):toWorld(vec(0,0,90)*Size))
        holoAng(V2+72,holoEntity(71):toWorld(ang(0,0,0)))
        holoScale(V2+72,vec(0.4,2,5)*Size)
        holoModel(V2+72,"models/sprops/rectangles/size_1/rect_3x3x3.mdl")
        holoMaterial(V2+72,Mat_Base)
        holoColor(V2+72,Color_Base*0.75)
        holoParent(V2+72,entity())
        if(V2<(36)){
            timer("holocreate2",100)
        }
    }else{
        timer("holocreate2",1000)
    }
    if(V2>=36){
        timer("holocreate",100)
        holoAng(71,entity():toWorld(ang(0,0,90)))
        holoPos(1000,entity():toWorld(vec(0,0,1.15)*Size))
        holoAng(1000,entity():toWorld(ang(0,0,0)))
    }
}elseif(clk("holocreate")){
    if(holoRemainingSpawns()>4){
        V++
        if(V==1){
            chevronHolo(5,holoEntity(4),entity(),(360/9)*0,51) # chevron 1
        }
        if(V==2){
            chevronHolo(10,holoEntity(4),entity(),(360/9)*1,53) # chevron 2
        }
        if(V==3){
            chevronHolo(15,holoEntity(4),entity(),(360/9)*2,55) # chevron 3
        }
        if(V==4){
            chevronHolo(20,holoEntity(4),entity(),(360/9)*3,57) # chevron 4
        }
        if(V==5){
            chevronHolo(25,holoEntity(4),entity(),(360/9)*4,59) # chevron 5
        }
        if(V==6){
            chevronHolo(30,holoEntity(4),entity(),(360/9)*5,61) # chevron 6
        }
        if(V==7){
            chevronHolo(35,holoEntity(4),entity(),(360/9)*6,63) # chevron 7
        }
        if(V==8){
            chevronHolo(40,holoEntity(4),entity(),(360/9)*7,65) # chevron 8
        }
        if(V==9){
            chevronHolo(45,holoEntity(4),entity(),(360/9)*8,67) # chevron 9
        }
        if(V<9){
            timer("holocreate",100)
        }
    }else{
        timer("holocreate",1000)
    }
}elseif(!Block){
    R = 0
    G = 255*Horizon
    B = 255*Horizon
    if(Horizon){
        findInSphere(entity():toWorld(vec(0,-180*(Val/100),0)),50+(25*(Val/100)))
        Array = findToArray()
        
        foreach(I,E:entity=Array){
            if(Val==0){
                if(!Iris){
                    if(!IrisActive){
                        E:plySetPos(TargetEnt:toWorld(vec(0,-90,(E:pos()-entity():pos()):z())))
                        E:plySetAng(ang(TargetEnt:angles():pitch(),TargetEnt:angles():yaw()+270,0))
                    }else{
                        E:plyIgnite()
                        E:plySetHealth(0)
                    }
                }
            }else{
                if(!Iris){
                    E:plyIgnite()
                    E:plySetHealth(0)
                }
            }
        }
    }
    if(changed(Horizon)&!Horizon){
        Closing = 1
        if(Closing){
            timer("closingend",1050)
        }
    }
    if(clk("closingend")){
        Closing = 0
    }
    if(clk("entsend")){
        dsSend(WritingData+"_entity_send","stargate-naki",entity())
    }
    if(clk("autoopen")){
        Open = 1
    }
    if(clk("close")){
        dsSend(WritingData+"_close","stargate-naki",WritingData)
        Open = 0
        CanOpen = 0
        WritingData = ""
        Glyphs = 0
        TargetEnt=noentity()
    }
    if(changed(Dial)){
        if(!Dial){
            Open = 0
            CanOpen = 0
            dsSend(WritingData+"_close","stargate-naki",WritingData)
            TargetEnt=noentity()
        }else{
            dsSend(WritingData+"_check","stargate-naki",Address)
            timer("check_open",100)
            #dsSend(WritingData+"_address_get","stargate-naki",WritingData+" "+Address)
        }
    }
    if(changed(DialButton)&DialButton){
        Dial=!Dial
    }
    if(!Horizon&!Open){
        if(TextEntry:explode(""):count()==1){
            if(changed(TextEntry)&TextEntry!=""){
                WritingData = WritingData+TextEntry
                #entity():soundPlay("chevron",0,ChevronSound)
                if(Chev:isValid()){
                    Chev:destroy()
                }
                if(webAudiosLeft()>0&webAudioCanCreate()){
                    Chev = webAudio("https://raw.githubusercontent.com/RafaelDeJongh/cap_resources/master/sound/stargate/atlantis/chevron.mp3")
                    Chev:setPos(entity():pos())
                    Chev:setRadius(2000)
                    Chev:parentTo(entity())
                    Chev:play()
                }
            }
        }
    }
    if(Open&WritingData:explode(""):count() < 7){
        ErrorCode = 1
    }
    if(WritingData:explode(""):count() > 9){
        ErrorCode = 1
    }
    if(Open*(WritingData==Address)){
        ErrorCode = 1
    }
    if(clk("check_open")){
        if(CanOpen==0){
            WritingData = ""
            Glyphs = 0
            Dial = 0
            timer("stoperror",2000)
            timer("errorsound",100)
        }
    }
    if(changed(ErrorCode)&ErrorCode){
        WritingData = ""
        Glyphs = 0
        #entity():soundPlay("dialerror",0,DialErrorSound)
        Dial = 0
        timer("stoperror",2000)
        timer("errorsound",100)
    }
    if(clk("stoperror")){
        ErrorCode = 0
    }
    if(clk("errorsound")){
        if(Fail:isValid()){
            Fail:destroy()
        }
        if(webAudiosLeft()>0&webAudioCanCreate()){
            Fail = webAudio("https://raw.githubusercontent.com/RafaelDeJongh/cap_resources/master/sound/stargate/atlantis/fail.mp3")
            Fail:setPos(entity():pos())
            Fail:setRadius(5000)
            Fail:parentTo(entity())
            Fail:play()
        }
    }
    holoColor(51,(Chev_Color_On*Chev1)+(Chev_Color_Off*!Chev1))
    holoColor(52,(Chev_Color_On*Chev1)+(Chev_Color_Off*!Chev1))
    holoDisableShading(51,Chev1)
    holoDisableShading(52,Chev1)
    
    holoColor(53,(Chev_Color_On*Chev2)+(Chev_Color_Off*!Chev2))
    holoColor(54,(Chev_Color_On*Chev2)+(Chev_Color_Off*!Chev2))
    holoDisableShading(53,Chev2)
    holoDisableShading(54,Chev2)
    
    holoColor(55,(Chev_Color_On*Chev3)+(Chev_Color_Off*!Chev3))
    holoColor(56,(Chev_Color_On*Chev3)+(Chev_Color_Off*!Chev3))
    holoDisableShading(55,Chev3)
    holoDisableShading(56,Chev3)
    
    holoColor(57,(Chev_Color_On*Chev8)+(Chev_Color_Off*!Chev8))
    holoColor(58,(Chev_Color_On*Chev8)+(Chev_Color_Off*!Chev8))
    holoDisableShading(57,Chev8)
    holoDisableShading(58,Chev8)
    
    holoColor(59,(Chev_Color_On*Chev9)+(Chev_Color_Off*!Chev9))
    holoColor(60,(Chev_Color_On*Chev9)+(Chev_Color_Off*!Chev9))
    holoDisableShading(59,Chev9)
    holoDisableShading(60,Chev9)
    
    holoColor(61,(Chev_Color_On*Chev4)+(Chev_Color_Off*!Chev4))
    holoColor(62,(Chev_Color_On*Chev4)+(Chev_Color_Off*!Chev4))
    holoDisableShading(61,Chev4)
    holoDisableShading(62,Chev4)
    
    holoColor(63,(Chev_Color_On*Chev5)+(Chev_Color_Off*!Chev5))
    holoColor(64,(Chev_Color_On*Chev5)+(Chev_Color_Off*!Chev5))
    holoDisableShading(63,Chev5)
    holoDisableShading(64,Chev5)
    
    holoColor(65,(Chev_Color_On*Chev6)+(Chev_Color_Off*!Chev6))
    holoColor(66,(Chev_Color_On*Chev6)+(Chev_Color_Off*!Chev6))
    holoDisableShading(65,Chev6)
    holoDisableShading(66,Chev6)
    
    holoColor(67,(Chev_Color_On*Chev7)+(Chev_Color_Off*!Chev7))
    holoColor(68,(Chev_Color_On*Chev7)+(Chev_Color_Off*!Chev7))
    holoDisableShading(67,Chev7)
    holoDisableShading(68,Chev7)
    
    
    Chevron_Locked = Open
    
    Chev1 = WritingData:explode(""):count()>0
    Chev2 = WritingData:explode(""):count()>1
    Chev3 = WritingData:explode(""):count()>2
    Chev4 = WritingData:explode(""):count()>3
    Chev5 = WritingData:explode(""):count()>4
    Chev6 = WritingData:explode(""):count()>5
    Chev7 = WritingData:explode(""):count()>6
    
    Chev8 = WritingData:explode(""):count()>7
    Chev9 = WritingData:explode(""):count()>8
    
    ChevsActive = Chev2+Chev3+Chev4+Chev5+Chev6+Chev7+Chev8+Chev9
    
    AllChev=Chev2*Chev3*Chev4*Chev5*Chev6*Chev7
    
    Horizon = 1 * AllChev & Open & !Close
    
    Glyph:setColor((Chev_Color_On*Horizon)+(Chev_Color_Off*!Horizon))
    
    if(Glyphs){
        Glyph:setMaterial("lights/white005")
    }else{
        Glyph:setMaterial("models/debug/debugwhite")
    }
    if(changed(Horizon)){
        timer("soundstop",5000)
        if(Horizon){
            Glyphs = 1
            for(I = 1,WritingData:explode(""):count()){
                if(WritingData:explode("")[I,string]==WritingData:explode("")[I+1,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+2,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+3,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+4,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+5,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+6,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+7,string]){
                    ErrorCode=1
                }elseif(WritingData:explode("")[I,string]==WritingData:explode("")[I+8,string]){
                    ErrorCode=1
                }
            }
            #entity():soundPlay("horizon",0,HorizonOpenSound)
            timer("autoclose",(1000*60)*38)
            timer("entsend",1000)
            if(Chev:isValid()){
                Chev:destroy()
            }
            if(OpenAudio:isValid()){
                OpenAudio:destroy()
            }
            if(OpenAudio:isValid()){
                CloseAudio:destroy()
            }
            if(webAudiosLeft()>0&webAudioCanCreate()){
                OpenAudio = webAudio("https://raw.githubusercontent.com/RafaelDeJongh/cap_resources/master/sound/stargate/atlantis/open.mp3")
                OpenAudio:setPos(entity():pos())
                OpenAudio:setRadius(2000)
                OpenAudio:parentTo(entity())
                OpenAudio:play()
            }
        }else{
            #entity():soundPlay("horizon",0,HorizonCloseSound)
            TargetEnt=noentity()
            if(Chev:isValid()){
                Chev:destroy()
            }
            if(OpenAudio:isValid()){
                OpenAudio:destroy()
            }
            if(OpenAudio:isValid()){
                CloseAudio:destroy()
            }
            if(webAudiosLeft()>0&webAudioCanCreate()){
                CloseAudio = webAudio("https://raw.githubusercontent.com/RafaelDeJongh/cap_resources/master/sound/stargate/close.mp3")
                CloseAudio:setPos(entity():pos())
                CloseAudio:setRadius(2000)
                CloseAudio:parentTo(entity())
                CloseAudio:play()
            }
        }
        if(AllChev&!Open){
            timer("close",1000)
        }
    }
    if(clk("soundstop")){
        if(Chev:isValid()){
            Chev:destroy()
        }
        if(OpenAudio:isValid()){
            OpenAudio:destroy()
        }
        if(CloseAudio:isValid()){
            CloseAudio:destroy()
        }
        if(Fail:isValid()){
            Fail:destroy()
        }
    }
    
    if(Horizon){
        if(Val<100){
            if(!Switch){
                Val+=100/15
            }
        }
        if(Val>=100){
            if(!Switch){
                Val=100
            }
            Switch=1
        }
        if(Val>0){
            if(Switch){
                Val-=100/15
            }
        }
        if(Val<0){
            Val=0
        }
        holoScale(69,vec(2.2,0.1,2.2)*Size)
        holoScale(9999,vec(2.2,0.05,2.2)*Size)
        if(Val>0){
            holoScale(70,vec(0.9-(0.5*((Val*!Iris)/100)),0.9-(0.5*((Val*!Iris)/100)),0.5*((Val*!Iris)/100))*Size)
            holoScale(71,vec(3-(1.5*((Val*!Iris)/100)),3-(1.5*((Val*!Iris)/100)),2.5*((Val*!Iris)/100))*Size)
        }else{
            holoScale(70,vec(0))
            holoScale(71,vec(0))
        }
        if(clk("autoclose")){
            Close = 1
            Open = 0
            Dial = 0
            dsSend(WritingData+"_close","stargate-naki",WritingData)
        }
    }else{
        stoptimer("autoclose")
        Switch = 0
        Val = 0
        Close = 0
        Open = 0
        holoScale(69,vec(0))
        holoScale(9999,vec(0))
        holoScale(70,vec(0))
        holoScale(71,vec(0))
    }
    if(dsClk()){
        if(dsClkName()==Address+"_address_get"){
            if(dsGetString():explode(" ")[1,string]==Address){
                WritingData = dsGetString():explode(" ")[2,string]
                timer("autoopen",500)
                Dial = 1
            }
        }
        if(dsClkName()==Address+"_check"){
            dsSend(dsGetString()+"_exists","stargate-naki",entity())
        }
        if(dsClkName()==Address+"_entity_send"){
            TargetEnt = dsGetEntity()
        }
        if(dsClkName()==Address+"_close"){
            if(dsGetString():explode(" ")[1,string]==Address){
                Open = 0
                TargetEnt=noentity()
                Dial = 0
            }
        }
        if(dsClkName()==Address+"_exists"){
            CanOpen = 1
            dsSend(WritingData+"_address_get","stargate-naki",WritingData+" "+Address)
        }
        if(dsClkName()==Address+"_iris_send"){
            IrisActive=dsGetNumber()
        }
    }
    if(changed(Iris)|changed(Open)){
        if(Open){
            dsSend(WritingData+"_iris_send","stargate-naki",Iris)
        }
    }
}elseif(last()){
    dsLeaveGroup("stargate-naki")
    if(Chev:isValid()){
        Chev:destroy()
    }
    if(OpenAudio:isValid()){
        OpenAudio:destroy()
    }
    if(CloseAudio:isValid()){
        CloseAudio:destroy()
    }
    if(Fail:isValid()){
        Fail:destroy()
    }
}
